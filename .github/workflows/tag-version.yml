name: Tag Version

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'

jobs:
  tag-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Bump Version and Push Tag
        id: bump
        uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            // Get the latest tag or default to v0.0.0 if none exists
            let latestTag;
            try {
              latestTag = execSync('git describe --tags --abbrev=0').toString().trim();
            } catch (error) {
              latestTag = 'v0.0.0';
            }
            console.log(`Latest tag: ${latestTag}`);

            // Remove the "v" prefix and split into major, minor, patch numbers
            const [major, minor, patch] = latestTag.replace(/^v/, '').split('.').map(Number);
            // Increment patch (you could add logic here for minor/major bumps)
            const newPatch = patch + 1;
            const newVersion = `v${major}.${minor}.${newPatch}`;
            console.log(`New version: ${newVersion}`);

            // Read and update the version in pyproject.toml
            const tomlPath = 'pyproject.toml';
            let tomlContent = fs.readFileSync(tomlPath, 'utf8');
            // Replace the version line (assumes the version is on its own line)
            tomlContent = tomlContent.replace(
              /^version\s*=\s*".*?"$/m,
              `version = "${major}.${minor}.${newPatch}"`
            );
            fs.writeFileSync(tomlPath, tomlContent);
            console.log(`Updated ${tomlPath} with version ${newVersion}`);

            // Configure git and commit the version bump
            execSync('git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"');
            execSync('git config --local user.name "github-actions[bot]"');
            execSync('git add pyproject.toml');
            execSync(`git commit -m "chore: bump version to ${newVersion}"`);
            execSync('git push origin main');

            // Create a new annotated tag and push it
            execSync(`git tag -a ${newVersion} -m "Release ${newVersion}"`);
            execSync(`git push origin ${newVersion}`);
            // Return the new version so that subsequent steps can use it
            return newVersion;
          result-encoding: string

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump.outputs.result }}
          release_name: Release ${{ steps.bump.outputs.result }}
          body: |
            Auto-generated release based on recent commits.
